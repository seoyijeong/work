plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //springBoot 3.0 버전 추가
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.2'
    // mysql connector 8.0
    implementation 'mysql:mysql-connector-java:8.0.33'
        //롬복추가 //https\://services.gradle.org/distributions/gradle-8.4-bin.zip 그래들 버전을 맞추기(그래들 프로퍼티스)
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    //jpa 추가
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //queryDsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

tasks.named('test') {
    useJUnitPlatform()
}


// === ⭐ QueryDsl 빌드 옵션 (선택) ===
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean.doLast {
    file(querydslDir).deleteDir()
}