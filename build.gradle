/*build.gradle은 파일 자체가  Project 오브젝트(객체)로 Project 오브젝트는 Project인터페이스를 구현하는 구현체이다.
* Project 오브젝트는 Project 단위에서 필요한 작업을 수행하기 위해 모든 메서드와 프로퍼티를 모아놓은 슈퍼객체이다.
* */

//gradle Task를 이용해 java application을 빌드하게 되면 이 build task는 이 메서드들을 수행
//{} 내부의 메서드 들은 메서드의 인자로 넘겨짐
plugins { //java를 컴파일 하기 위해 plugin을 설정한다.
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories { //저장소를 입력하는 섹션. 주로 maven의 저장소를 그대로 사용
    mavenCentral()
}
// 라이브러리
dependencies { //종속성 입력. 기존에는 compile이 있었으나  3.0버전부터 deprecated(더이상사용하지않음)
    //implementation : 프로젝트 컴파일 과정에서 필요한 라이브러리
    //test시에 필요한 dependency 관리
    implementation 'org.springframework.boot:spring-boot-starter-web'  //interceptor에도 필요함
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //springBoot 3.0 버전 추가
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.2'
    // mysql connector 8.0
    implementation 'mysql:mysql-connector-java:8.0.33'
        //롬복추가 //https\://services.gradle.org/distributions/gradle-8.4-bin.zip 그래들 버전을 맞추기(그래들 프로퍼티스)
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    //jpa 추가
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //queryDsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    implementation 'org.springframework.boot:spring-boot-starter-security'    /* Spring security */
    testImplementation 'org.springframework.security:spring-security-test'

    //springDocs 설정
    //버전이 다르면 swagger페이지에 접속할 수 없기 때문에 꼭 버전확인을 한 후에 적용(boot 3.0이상은 2.1.0이상)
    //implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.7.0'
    //implementation "org.springframework.boot:spring-boot-dependencies:2.6.14"
    // Spring Boot 3버전부터는 위의 의존성 라이브러리를 추가하면 스웨거 UI 접속 시 404 에러가 발생하기 때문에 다음 코드를 추가
    //api-docs에서 json형식으로 보여주기 위해
    //implementation 'org.springdoc:springdoc-openapi-webmvc-core:1.7.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

}

tasks.named('test') {
    useJUnitPlatform()
}


// === ⭐ QueryDsl 빌드 옵션 (선택) ===

/*이 코드를 사용하면 프로젝트 빌드 시에 QueryDSL이 생성한 소스 코드를 적절히 처리하여 빌드에 포함시키고,
클린(clean) 작업 시에 생성된 소스 코드를 삭제합니다. 이렇게 함으로써 QueryDSL을 효과적으로 프로젝트에 통합할 수 있습니다.
*/

//querydslDir 변수는 빌드 디렉토리 아래에 생성된 QueryDSL 소스코드가 위치할 디렉토리 경로를 나타냄
def querydslDir = "$buildDir/generated/querydsl"

//메인소스 세트(main)에 추가적인 소스 디렉토리로 querydslDir을 지정. 이는  QueryDsl 이 생성한 소스코드가 빌드에 포함되도록함
sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

/*tasks.withType(JavaCompile) 블록은 Java 컴파일 작업에 대한 옵션을 설정합니다.
여기서는 어노테이션 프로세서(Annotation Processor)가
생성한 소스 코드의 디렉토리를 querydslDir로 설정하여, 컴파일된 클래스 파일이 해당 디렉토리에 위치하도록 합니다.
*/
tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}
/*clean.doLast 블록은 빌드 클린업 시에 실행될 작업을 정의합니다.
여기서는 querydslDir 디렉토리를 삭제하는 것으로, 이는 빌드 디렉토리 아래에 생성된 QueryDSL 소스 코드를 정리하는 역할을 합니다.*/
clean.doLast {
    file(querydslDir).deleteDir()
}